/**
 * GLR 4 Schools
 * **NUMBER ONE TOPIC IS HOW BEST TO IMPLEMENT THESE API so that only data is segregated by school.**  Need to implement a form of authentication check PER SCHOOL. Is there a way to leverage the authorisation process implement by Group Call Xporter? This is the full set of API for GLR 4 Schools. Security definitions and exqmples need to be added.
 *
 * The version of the OpenAPI document: 1.0.1-oas3
 * Contact: john@greatlittlerewards.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "./ApiClient";
import InlineResponse200 from './InlineResponse200';
import Product from './Product';
import ProductCollection from './ProductCollection';
import School from './School';
import Student from './Student';

/**
* SystemApi service.
* @module //SystemApiApi
* @version 1.0.1-oas3
*/
export default class SystemApiApi {

    /**
    * Constructs a new SystemApiApi.
    * @alias module://SystemApiApi
    * @class
    * @param {module:/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getCollections operation.
     * @callback module://SystemApiApi~getCollectionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:ProductCollection>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of collections provided
     * returns an array of product collections actually sourced from shopify. Referense the shopify API docs for info on attributes. This is sourced directly from shopify and uses shopify GID values for IDs. You cannot use these from the client but need to be passed to the server so it has the right reference
     * @param {module://SystemApiApi~getCollectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:ProductCollection>}
     */
    getCollections(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProductCollection];
      return this.apiClient.callApi(
        '/store/collection/getCollections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductById operation.
     * @callback module://SystemApiApi~getProductByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:Product} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get a product by its Id
     * get a product by its Id
     * @param {String} productId ID of product to to return. Example gid://shopify/Product/2066193383491
     * @param {module://SystemApiApi~getProductByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Product}
     */
    getProductById(productId, callback) {
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getProductById");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Product;
      return this.apiClient.callApi(
        '/store/product/{productId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProducts operation.
     * @callback module://SystemApiApi~getProductsCallback
     * @param {String} error Error message, if any.
     * @param {module:InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns product inventory
     * returns an array of products actually sourced from shopify. Referense the shopify API docs for info on attributes. This is sourced directly from shopify and uses shopify GID values for IDs. You cannot use these from the client but need to be passed to the server so it has the right reference
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchString pass a string that is used to search the title and description
     * @param {module://SystemApiApi~getProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:InlineResponse200}
     */
    getProducts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'searchString': opts['searchString']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/store/product', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductsForCollection operation.
     * @callback module://SystemApiApi~getProductsForCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:Product>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get an array of products by a collection Id
     * get an array of products by a collection Id
     * @param {String} collectionId ID of collection to search by gid://shopify/Collection/128622083
     * @param {module://SystemApiApi~getProductsForCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:Product>}
     */
    getProductsForCollection(collectionId, callback) {
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling getProductsForCollection");
      }

      let pathParams = {
      };
      let queryParams = {
        'collectionId': collectionId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Product];
      return this.apiClient.callApi(
        '/store/product/getProductsForCollection', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSchoolById operation.
     * @callback module://SystemApiApi~getSchoolByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:School} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns simple school data based on a school Id
     * @param {String} schoolId ID of school to return
     * @param {module://SystemApiApi~getSchoolByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:School}
     */
    getSchoolById(schoolId, callback) {
      let postBody = null;
      // verify the required parameter 'schoolId' is set
      if (schoolId === undefined || schoolId === null) {
        throw new Error("Missing the required parameter 'schoolId' when calling getSchoolById");
      }

      let pathParams = {
        'schoolId': schoolId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = School;
      return this.apiClient.callApi(
        '/school/{schoolId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStudentById operation.
     * @callback module://SystemApiApi~getStudentByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:Student} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find student by ID
     * **Get Student** Returns a single student.
     * @param {String} xSchoolToken
     * @param {String} studentId ID of student to return
     * @param {module://SystemApiApi~getStudentByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Student}
     */
    getStudentById(xSchoolToken, studentId, callback) {
      let postBody = null;
      // verify the required parameter 'xSchoolToken' is set
      if (xSchoolToken === undefined || xSchoolToken === null) {
        throw new Error("Missing the required parameter 'xSchoolToken' when calling getStudentById");
      }
      // verify the required parameter 'studentId' is set
      if (studentId === undefined || studentId === null) {
        throw new Error("Missing the required parameter 'studentId' when calling getStudentById");
      }

      let pathParams = {
        'studentId': studentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-School-Token': xSchoolToken
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Student;
      return this.apiClient.callApi(
        '/student/{studentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
