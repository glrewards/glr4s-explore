/**
 * GLR 4 Schools
 * **NUMBER ONE TOPIC IS HOW BEST TO IMPLEMENT THESE API so that only data is segregated by school.**  Need to implement a form of authentication check PER SCHOOL. Is there a way to leverage the authorisation process implement by Group Call Xporter? This is the full set of API for GLR 4 Schools. Security definitions and exqmples need to be added.
 *
 * The version of the OpenAPI document: 1.0.1-oas3
 * Contact: john@greatlittlerewards.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "./ApiClient";
import LineItem from './LineItem';
import Order from './Order';

/**
* Cart service.
* @module //CartApi
* @version 1.0.1-oas3
*/
export default class CartApi {

    /**
    * Constructs a new CartApi.
    * @alias module://CartApi
    * @class
    * @param {module:/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createNewCart operation.
     * @callback module://CartApi~createNewCartCallback
     * @param {String} error Error message, if any.
     * @param {module:Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save these line items into a school order.
     * If there is a current order these items are added to it for the student. If not a new order is created for the school and these line items are added. We also validate that the student has enough points (would be good if that was also applied at GUI) and we deduct this from the students total. The updated values will be contained in the response object
     * @param {module:Body} body the current user AND an array of line items to be added to a school order
     * @param {module://CartApi~createNewCartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Order}
     */
    createNewCart(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createNewCart");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Order;
      return this.apiClient.callApi(
        '/cart', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findByStudentId operation.
     * @callback module://CartApi~findByStudentIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:LineItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get the list of line items for this student.
     * get the list of line items for this student from the current cart that belong to this student if any exist
     * @param {String} studentId the student we want the lineitems for. Example *5ce65f0f0e67a54e8fbefe77*
     * @param {module://CartApi~findByStudentIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:LineItem>}
     */
    findByStudentId(studentId, callback) {
      let postBody = null;
      // verify the required parameter 'studentId' is set
      if (studentId === undefined || studentId === null) {
        throw new Error("Missing the required parameter 'studentId' when calling findByStudentId");
      }

      let pathParams = {
      };
      let queryParams = {
        'studentId': studentId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [LineItem];
      return this.apiClient.callApi(
        '/cart/findByStudentId', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCart operation.
     * @callback module://CartApi~updateCartCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update line items
     * amend the items of mine that belong to an open school order
     * @param {module://CartApi~updateCartCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateCart(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'basicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cart', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
