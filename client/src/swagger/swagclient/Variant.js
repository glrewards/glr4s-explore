/**
 * GLR 4 Schools
 * **NUMBER ONE TOPIC IS HOW BEST TO IMPLEMENT THESE API so that only data is segregated by school.**  Need to implement a form of authentication check PER SCHOOL. Is there a way to leverage the authorisation process implement by Group Call Xporter? This is the full set of API for GLR 4 Schools. Security definitions and exqmples need to be added.
 *
 * The version of the OpenAPI document: 1.0.1-oas3
 * Contact: john@greatlittlerewards.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from './ApiClient';

/**
 * The Variant model module.
 * @module //Variant
 * @version 1.0.1-oas3
 */
class Variant {
    /**
     * Constructs a new <code>Variant</code>.
     * @alias module://Variant
     */
    constructor() {

        Variant.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) {
    }

    /**
     * Constructs a <code>Variant</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module://Variant} obj Optional instance to populate.
     * @return {module://Variant} The populated <code>Variant</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Variant();

            if (data.hasOwnProperty('shopifyId')) {
                obj['shopifyId'] = ApiClient.convertToType(data['shopifyId'], 'String');
            }
            if (data.hasOwnProperty('sku')) {
                obj['sku'] = ApiClient.convertToType(data['sku'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('inventoryQuantity')) {
                obj['inventoryQuantity'] = ApiClient.convertToType(data['inventoryQuantity'], 'Number');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('imageId')) {
                obj['imageId'] = ApiClient.convertToType(data['imageId'], 'String');
            }
            if (data.hasOwnProperty('imageSrc')) {
                obj['imageSrc'] = ApiClient.convertToType(data['imageSrc'], 'String');
            }
            if (data.hasOwnProperty('imageAltText')) {
                obj['imageAltText'] = ApiClient.convertToType(data['imageAltText'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {String} shopifyId
 */
Variant.prototype['shopifyId'] = undefined;

/**
 * @member {String} sku
 */
Variant.prototype['sku'] = undefined;

/**
 * this is the title of the variant. all products should always have the Default Title variant.
 * @member {String} title
 */
Variant.prototype['title'] = undefined;

/**
 * @member {Number} inventoryQuantity
 */
Variant.prototype['inventoryQuantity'] = undefined;

/**
 * @member {Number} price
 */
Variant.prototype['price'] = undefined;

/**
 * If there is a featured product it will be detailed here. In reatlity we will just use the the product images for now. Here is a definition of the sopify object we might use in the future https://help.shopify.com/en/api/graphql-admin-api/reference/object/image
 * @member {String} imageId
 */
Variant.prototype['imageId'] = undefined;

/**
 * @member {String} imageSrc
 */
Variant.prototype['imageSrc'] = undefined;

/**
 * @member {String} imageAltText
 */
Variant.prototype['imageAltText'] = undefined;






export default Variant;

