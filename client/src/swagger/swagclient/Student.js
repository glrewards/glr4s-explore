/**
 * GLR 4 Schools
 * **NUMBER ONE TOPIC IS HOW BEST TO IMPLEMENT THESE API so that only data is segregated by school.**  Need to implement a form of authentication check PER SCHOOL. Is there a way to leverage the authorisation process implement by Group Call Xporter? This is the full set of API for GLR 4 Schools. Security definitions and exqmples need to be added.
 *
 * The version of the OpenAPI document: 1.0.1-oas3
 * Contact: john@greatlittlerewards.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from './ApiClient';
import School from './School';

/**
 * The Student model module.
 * @module //Student
 * @version 1.0.1-oas3
 */
class Student {
    /**
     * Constructs a new <code>Student</code>.
     * @alias module://Student
     * @param id {String}
     * @param externalId {String}
     * @param displayName {String}
     * @param currentGLRPoints {Number}
     */
    constructor(id, externalId, displayName, currentGLRPoints) {

        Student.initialize(this, id, externalId, displayName, currentGLRPoints);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, externalId, displayName, currentGLRPoints) {
        obj['Id'] = id;
        obj['externalId'] = externalId;
        obj['displayName'] = displayName;
        obj['currentGLRPoints'] = currentGLRPoints;
    }

    /**
     * Constructs a <code>Student</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module://Student} obj Optional instance to populate.
     * @return {module://Student} The populated <code>Student</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Student();

            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('externalId')) {
                obj['externalId'] = ApiClient.convertToType(data['externalId'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('currentGLRPoints')) {
                obj['currentGLRPoints'] = ApiClient.convertToType(data['currentGLRPoints'], 'Number');
            }
            if (data.hasOwnProperty('foreName')) {
                obj['foreName'] = ApiClient.convertToType(data['foreName'], 'String');
            }
            if (data.hasOwnProperty('surname')) {
                obj['surname'] = ApiClient.convertToType(data['surname'], 'String');
            }
            if (data.hasOwnProperty('school')) {
                obj['school'] = School.constructFromObject(data['school']);
            }
            if (data.hasOwnProperty('photo')) {
                obj['photo'] = ApiClient.convertToType(data['photo'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {String} Id
 */
Student.prototype['Id'] = undefined;

/**
 * @member {String} externalId
 */
Student.prototype['externalId'] = undefined;

/**
 * @member {String} displayName
 */
Student.prototype['displayName'] = undefined;

/**
 * @member {Number} currentGLRPoints
 */
Student.prototype['currentGLRPoints'] = undefined;

/**
 * @member {String} foreName
 */
Student.prototype['foreName'] = undefined;

/**
 * @member {String} surname
 */
Student.prototype['surname'] = undefined;

/**
 * @member {module:School} school
 */
Student.prototype['school'] = undefined;

/**
 * @member {String} photo
 */
Student.prototype['photo'] = undefined;






export default Student;

