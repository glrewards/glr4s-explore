/**
 * GLR 4 Schools
 * **NUMBER ONE TOPIC IS HOW BEST TO IMPLEMENT THESE API so that only data is segregated by school.**  Need to implement a form of authentication check PER SCHOOL. Is there a way to leverage the authorisation process implement by Group Call Xporter? This is the full set of API for GLR 4 Schools. Security definitions and exqmples need to be added.
 *
 * The version of the OpenAPI document: 1.0.1-oas3
 * Contact: john@greatlittlerewards.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "./ApiClient";
import InlineResponse200 from './InlineResponse200';
import Product from './Product';

/**
* Product service.
* @module //ProductApi
* @version 1.0.1-oas3
*/
export default class ProductApi {

    /**
    * Constructs a new ProductApi.
    * @alias module://ProductApi
    * @class
    * @param {module:/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getProductById operation.
     * @callback module://ProductApi~getProductByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:Product} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get a product by its Id
     * get a product by its Id
     * @param {String} productId ID of product to to return. Example gid://shopify/Product/2066193383491
     * @param {module://ProductApi~getProductByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Product}
     */
    getProductById(productId, callback) {
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getProductById");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Product;
      return this.apiClient.callApi(
        '/store/product/{productId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProducts operation.
     * @callback module://ProductApi~getProductsCallback
     * @param {String} error Error message, if any.
     * @param {module:InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns product inventory
     * returns an array of products actually sourced from shopify. Referense the shopify API docs for info on attributes. This is sourced directly from shopify and uses shopify GID values for IDs. You cannot use these from the client but need to be passed to the server so it has the right reference
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchString pass a string that is used to search the title and description
     * @param {module://ProductApi~getProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:InlineResponse200}
     */
    getProducts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'searchString': opts['searchString']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/store/product', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductsForCollection operation.
     * @callback module://ProductApi~getProductsForCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:Product>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get an array of products by a collection Id
     * get an array of products by a collection Id
     * @param {String} collectionId ID of collection to search by gid://shopify/Collection/128622083
     * @param {module://ProductApi~getProductsForCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:Product>}
     */
    getProductsForCollection(collectionId, callback) {
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling getProductsForCollection");
      }

      let pathParams = {
      };
      let queryParams = {
        'collectionId': collectionId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Product];
      return this.apiClient.callApi(
        '/store/product/getProductsForCollection', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
